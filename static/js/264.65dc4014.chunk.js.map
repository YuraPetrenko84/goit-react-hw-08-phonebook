{"version":3,"file":"static/js/264.65dc4014.chunk.js","mappings":"uKACA,MAA4B,0B,UCCfA,EAAS,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACvB,OACE,mBAAQC,UAAWC,EAAeC,KAAK,SAAvC,SACGH,GAGN,C,qGCRYI,EAAe,SAAAC,GAAK,OAAIA,EAAMC,OAAOC,MAAjB,ECIpBC,EAAiB,SAAAH,GAAK,OAAIA,EAAMI,SAASC,KAAnB,EACtBC,EAAc,SAAAN,GAAK,OAAIA,EAAMI,SAASG,KAAnB,EACnBC,EAAkB,SAAAR,GAAK,OAAIA,EAAMI,SAASK,SAAnB,EAEvBC,GAAwBC,EAAAA,EAAAA,IACnC,CAACR,EAAgBJ,IACjB,SAACK,EAAUH,GAIT,IAAMW,EAAmBX,EAAOY,cAChC,OAAOT,EAASH,QAAO,SAAAa,GAAO,OAC5BA,EAAQC,KAAKF,cAAcG,SAASJ,EADR,GAG/B,I,UCjBH,EAA8B,6BAA9B,EAAkE,sBAAlE,EAAoG,2B,oBCKvFK,EAAU,SAAC,GAAiB,IAAfH,EAAc,EAAdA,QAClBI,GAAWC,EAAAA,EAAAA,MAGjB,OACE,iBAAKvB,UAAWC,EAAhB,WACE,eAAGD,UAAWC,EAAd,UACGiB,EAAQC,KADX,KACmBD,EAAQM,WAE3B,mBAAQxB,UAAWC,EAAeC,KAAK,UAAUuB,QANhC,kBAAMH,GAASI,EAAAA,EAAAA,IAAcR,EAAQS,IAArC,EAMjB,UACE,SAAC,MAAD,QAIP,ECnBD,EAA0B,6BAA1B,EAA+D,2BAA/D,EAAiG,0BAAjG,EAAkI,0BAAlI,EAAsK,6BCgCtK,EA1BoB,WAClB,IAAMC,GAAkBC,EAAAA,EAAAA,IAAYf,GAC9BgB,GAAaD,EAAAA,EAAAA,IAAY1B,GAE/B,OACE,iBAAKH,UAAWC,EAAhB,WACE,eAAID,UAAWC,EAAf,2BACA,gBAAID,UAAWC,EAAf,UACG2B,EAAgBG,KAAI,SAAAb,GAAO,OAC1B,eAAqBlB,UAAWC,EAAhC,UACE,SAACoB,EAAD,CAASH,QAASA,KADXA,EAAQS,GADS,IAKA,IAA3BC,EAAgBI,QAA+B,KAAfF,IAC/B,cAAG9B,UAAWC,EAAd,yDAI0B,IAA3B2B,EAAgBI,QAA+B,KAAfF,IAC/B,cAAG9B,UAAWC,EAAd,6BAKT,EC9BD,GAAgB,SAAW,8BAA8B,KAAO,0BAA0B,MAAQ,2BAA2B,MAAQ,2BAA2B,aAAe,kCAAkC,WAAa,iC,8BCU/M,SAASgC,IACtB,IAAMzB,GAAWqB,EAAAA,EAAAA,IAAYtB,GACvBe,GAAWC,EAAAA,EAAAA,MAQXW,EAAmBC,EAAAA,KAAaC,MAAM,CAC1CjB,KAAMgB,EAAAA,KAAaE,OAAOC,SAAS,wBACnCd,OAAQW,EAAAA,KAAaE,OAAOC,SAAS,wBAwBvC,OACE,iBAAKtC,UAAWC,EAAAA,SAAhB,WACE,yCACA,SAAC,KAAD,CACEsC,cApCqB,CACzBpB,KAAM,GACNK,OAAQ,IAmCJU,iBAAkBA,EAClBM,SAvBW,SAACC,EAAQC,GACxBC,QAAQC,IAAIH,GACZE,QAAQC,IAAIF,GACZ,IAPwBG,EAOlB1B,EAAOsB,EAAOtB,KAPI0B,EASe1B,EARvCX,EAASsC,MAAK,qBAAG3B,KAAgBF,gBAAkB4B,EAAQ5B,aAA7C,IAYZ8B,MAAM,IAAD,OAAK5B,EAAL,+BAIPG,GAAS0B,EAAAA,EAAAA,IAAWP,IACpBC,EAAQO,YACT,EAKG,SAKG,gBAAGC,EAAH,EAAGA,aAAH,OACC,UAAC,KAAD,CACElD,UAAWC,EAAAA,KACXuC,SAAUU,EACV/B,KAAK,eACLgC,aAAa,MAJf,WAME,mBAAOnD,UAAWC,EAAAA,MAAlB,kBAEE,SAAC,KAAD,CACED,UAAWC,EAAAA,MACXC,KAAK,OACLiB,KAAK,OACLiC,YAAY,IACZC,WAAS,EACTf,UAAQ,EACRgB,QAAQ,4HAEV,SAAC,KAAD,CACEnC,KAAK,OACLoC,UAAU,IACVvD,UAAWC,EAAAA,iBAIf,mBAAOD,UAAWC,EAAAA,MAAlB,mBAEE,SAAC,KAAD,CACED,UAAWC,EAAAA,MACXC,KAAK,MACLiB,KAAK,SACLmC,QAAQ,yFACRF,YAAY,IACZd,UAAQ,KAEV,SAAC,KAAD,CACEnB,KAAK,SACLoC,UAAU,IACVvD,UAAWC,EAAAA,iBAGf,SAACH,EAAA,EAAD,oBAzCH,MA+CR,C,cCrGD,EAA2B,yBAA3B,EAAwF,sBAAxF,EAAsH,sBAAtH,EAAmM,yB,UCyBnM,EApBe,WACb,IAAMwB,GAAWC,EAAAA,EAAAA,MAEjB,OACE,iBAAKvB,UAAWC,EAAhB,WACE,kCACA,mBAAOD,UAAWC,EAAlB,mCAEE,kBACED,UAAWC,EACXC,KAAK,OACLiB,KAAK,SACLqC,SAAU,SAAAC,GAAK,OAAInC,GAASoC,EAAAA,EAAAA,GAAUD,EAAME,OAAOC,OAApC,KAEjB,SAAC,MAAD,CAAU5D,UAAWC,SAI5B,E,kBCvBD,EAA2B,2BCsC3B,EA1BiB,WACf,IAAMqB,GAAWC,EAAAA,EAAAA,MACXV,GAAYgB,EAAAA,EAAAA,IAAYjB,GACxBD,GAAQkB,EAAAA,EAAAA,IAAYnB,GAM1B,OAJAmD,EAAAA,EAAAA,YAAU,WACRvC,GAASwC,EAAAA,EAAAA,MACV,GAAE,CAACxC,KAGF,iCACE,qBAAStB,UAAWC,EAApB,WACE,SAACgC,EAAD,KACA,SAAC,EAAD,QAEF,6BACGpB,IAAcF,GACb,SAAC,IAAD,CAAWoD,MAAM,UAAUC,MAAM,UAEjC,SAAC,EAAD,QAKT,C","sources":["webpack://react-homework-template/./src/components/Button/Button.module.css?ce6f","components/Button/Button.jsx","redux/filter/filter-selectors.js","redux/contacts/contacts-selectors.js","webpack://react-homework-template/./src/components/Contact/Contact.module.css?03fd","components/Contact/Contact.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/pages/Contacts.module.css?8552","pages/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"submitBtn\":\"Button_submitBtn__Xtf41\"};","import css from './Button.module.css';\n\nexport const Button = ({ children }) => {\n  return (\n    <button className={css.submitBtn} type=\"submit\">\n      {children}\n    </button>\n  );\n};\n","export const selectFilter = state => state.filter.status;\n","import { createSelector } from '@reduxjs/toolkit';\nimport { selectFilter } from 'redux/filter/filter-selectors';\n\n// файл оголошення функцій-селекторів\nexport const selectContacts = state => state.contacts.items;\nexport const selectError = state => state.contacts.error;\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    // const contacts = selectContacts(state);\n    // const filter = selectFilter(state);\n    // console.log('selectVisibleContacts');\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"contactCard\":\"Contact_contactCard__5AHBI\",\"name\":\"Contact_name__xbxVU\",\"deleteBtn\":\"Contact_deleteBtn__L35yB\"};","import { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/contacts-operations';\n\nimport css from './Contact.module.css';\nimport { MdDelete } from 'react-icons/md';\n\nexport const Contact = ({ contact }) => {\n  const dispatch = useDispatch();\n\n  const handleDelete = () => dispatch(deleteContact(contact.id));\n  return (\n    <div className={css.contactCard}>\n      <p className={css.name}>\n        {contact.name}: {contact.number}\n      </p>\n      <button className={css.deleteBtn} type=\"buttone\" onClick={handleDelete}>\n        <MdDelete />\n      </button>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"ContactList_wrapper__VP-XU\",\"title\":\"ContactList_title__gpugJ\",\"list\":\"ContactList_list__csErn\",\"item\":\"ContactList_item__EZYHO\",\"message\":\"ContactList_message__b6Via\"};","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/contacts/contacts-selectors';\nimport { Contact } from 'components/Contact/Contact';\nimport css from './ContactList.module.css';\nimport { selectFilter } from 'redux/filter/filter-selectors';\n\nconst ContactList = () => {\n  const visibleContacts = useSelector(selectVisibleContacts);\n  const filterData = useSelector(selectFilter);\n\n  return (\n    <div className={css.wrapper}>\n      <h2 className={css.title}>Contact list</h2>\n      <ul className={css.list}>\n        {visibleContacts.map(contact => (\n          <li key={contact.id} className={css.item}>\n            <Contact contact={contact} />\n          </li>\n        ))}\n        {visibleContacts.length === 0 && filterData === '' && (\n          <p className={css.message}>\n            your contact list is empty, add new contact\n          </p>\n        )}\n        {visibleContacts.length === 0 && filterData !== '' && (\n          <p className={css.message}>no mutches</p>\n        )}\n      </ul>\n    </div>\n  );\n};\n\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"formCard\":\"ContactForm_formCard__zIxaR\",\"form\":\"ContactForm_form__dhl+T\",\"label\":\"ContactForm_label__-cVXI\",\"input\":\"ContactForm_input__Bl93P\",\"ErrorMessage\":\"ContactForm_ErrorMessage__ttuE5\",\"btnWrapper\":\"ContactForm_btnWrapper__Z1qej\"};","// React/redux\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/contacts-operations';\nimport { selectContacts } from 'redux/contacts/contacts-selectors';\n// Components\nimport css from './ContactForm.module.css';\nimport { Button } from 'components/Button/Button';\n// Validation\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\n\nexport default function ContactForm() {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n  // початковий стан для formik\n  const formikInitialValue = {\n    name: '',\n    number: '',\n  };\n\n  // Валідація\n  const validationSchema = Yup.object().shape({\n    name: Yup.string().trim().required('Example: Alain Delon'),\n    number: Yup.string().trim().required('Example: 555-55-55'),\n  });\n\n  const checkIsInContacts = newName =>\n    contacts.some(({ name }) => name.toLowerCase() === newName.toLowerCase());\n\n  // Метод виконується при сабміті форми\n  const onSubmit = (values, actions) => {\n    console.log(values);\n    console.log(actions);\n    const name = values.name;\n\n    const isInContacts = checkIsInContacts(name);\n\n    // не додаємо контакт\n    if (isInContacts) {\n      alert(`\"${name}\" is already in contacts.`);\n      return;\n    }\n\n    dispatch(addContact(values));\n    actions.resetForm();\n  };\n\n  return (\n    <div className={css.formCard}>\n      <h2>New Contact</h2>\n      <Formik\n        initialValues={formikInitialValue}\n        validationSchema={validationSchema}\n        onSubmit={onSubmit}\n      >\n        {({ handleSubmit }) => (\n          <Form\n            className={css.form}\n            onSubmit={handleSubmit}\n            name=\"contact_form\"\n            autoComplete=\"off\"\n          >\n            <label className={css.label}>\n              Name\n              <Field\n                className={css.input}\n                type=\"text\"\n                name=\"name\"\n                placeholder=\" \"\n                autoFocus\n                required\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              />\n              <ErrorMessage\n                name=\"name\"\n                component=\"p\"\n                className={css.inputError}\n              />\n            </label>\n\n            <label className={css.label}>\n              Phone\n              <Field\n                className={css.input}\n                type=\"tel\"\n                name=\"number\"\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                placeholder=\" \"\n                required\n              />\n              <ErrorMessage\n                name=\"number\"\n                component=\"p\"\n                className={css.inputError}\n              />\n            </label>\n            <Button>Add</Button>\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"formCard\":\"Filter_formCard__QOYwR\",\"form\":\"Filter_form__wVnxJ\",\"label\":\"Filter_label__vEd1E\",\"input\":\"Filter_input__N7T3z\",\"ErrorMessage\":\"Filter_ErrorMessage__IpQiP\",\"findIcon\":\"Filter_findIcon__P-9u4\"};","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/filter/filter-slice';\nimport css from './Filter.module.css';\nimport { CgSearch } from 'react-icons/cg';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <div className={css.formCard}>\n      <h2>Find</h2>\n      <label className={css.label}>\n        Find contact by name:\n        <input\n          className={css.input}\n          type=\"text\"\n          name=\"filter\"\n          onChange={event => dispatch(setFilter(event.target.value))}\n        />\n        <CgSearch className={css.findIcon} />\n      </label>\n    </div>\n  );\n};\n\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"contacts\":\"Contacts_contacts__LNvgJ\"};","import ContactList from 'components/ContactList';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/contacts-operations';\nimport ContactForm from 'components/ContactForm';\nimport Filter from 'components/Filter';\nimport {\n  selectError,\n  selectIsLoading,\n} from 'redux/contacts/contacts-selectors';\nimport BarLoader from 'react-spinners/BarLoader';\nimport css from './Contacts.module.css';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <section className={css.contacts}>\n        <ContactForm />\n        <Filter />\n      </section>\n      <section>\n        {isLoading && !error ? (\n          <BarLoader color=\"#5ac846\" width=\"100%\" />\n        ) : (\n          <ContactList />\n        )}\n      </section>\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["Button","children","className","css","type","selectFilter","state","filter","status","selectContacts","contacts","items","selectError","error","selectIsLoading","isLoading","selectVisibleContacts","createSelector","normalizedFilter","toLowerCase","contact","name","includes","Contact","dispatch","useDispatch","number","onClick","deleteContact","id","visibleContacts","useSelector","filterData","map","length","ContactForm","validationSchema","Yup","shape","trim","required","initialValues","onSubmit","values","actions","console","log","newName","some","alert","addContact","resetForm","handleSubmit","autoComplete","placeholder","autoFocus","pattern","component","onChange","event","setFilter","target","value","useEffect","fetchContacts","color","width"],"sourceRoot":""}